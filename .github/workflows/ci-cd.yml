name: RemesaPay CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and type check
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [frontend, backend, contracts]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.workspace }}
          npm ci

      - name: Run linting
        run: |
          cd ${{ matrix.workspace }}
          npm run lint

      - name: Type check (TypeScript projects)
        if: matrix.workspace != 'contracts'
        run: |
          cd ${{ matrix.workspace }}
          npm run type-check || npm run build

  # Test smart contracts
  contracts-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json

      - name: Install dependencies
        run: |
          cd contracts
          npm ci

      - name: Compile contracts
        run: |
          cd contracts
          npm run compile

      - name: Run tests
        run: |
          cd contracts
          npm run test

      - name: Generate gas report
        run: |
          cd contracts
          npm run test:gas

      - name: Check contract size
        run: |
          cd contracts
          npm run size

  # Test backend API
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: remesapay_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/remesapay_test
        run: |
          cd backend
          npx prisma generate
          npx prisma db push

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/remesapay_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: |
          cd backend
          npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend

  # Test frontend
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [frontend, backend, contracts]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run security audit
        run: |
          cd ${{ matrix.workspace }}
          npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=${{ matrix.workspace }}/package.json

  # Build and deploy contracts to testnet
  deploy-contracts-testnet:
    runs-on: ubuntu-latest
    needs: [contracts-test, code-quality]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json

      - name: Install dependencies
        run: |
          cd contracts
          npm ci

      - name: Deploy to Base Testnet
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY_TESTNET }}
          BASE_TESTNET_RPC_URL: ${{ secrets.BASE_TESTNET_RPC_URL }}
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        run: |
          cd contracts
          npm run deploy:base-testnet

      - name: Deploy to Optimism Testnet
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY_TESTNET }}
          OPTIMISM_TESTNET_RPC_URL: ${{ secrets.OPTIMISM_TESTNET_RPC_URL }}
          OPTIMISM_ETHERSCAN_API_KEY: ${{ secrets.OPTIMISM_ETHERSCAN_API_KEY }}
        run: |
          cd contracts
          npm run deploy:optimism-testnet

  # Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-contracts-testnet]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could involve updating Kubernetes manifests,
          # triggering Railway/Render deployments, etc.

  # Deploy contracts to mainnet
  deploy-contracts-mainnet:
    runs-on: ubuntu-latest
    needs: [contracts-test, code-quality]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json

      - name: Install dependencies
        run: |
          cd contracts
          npm ci

      - name: Deploy to Base Mainnet
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY_MAINNET }}
          BASE_RPC_URL: ${{ secrets.BASE_RPC_URL }}
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        run: |
          cd contracts
          npm run deploy:base

      - name: Deploy to Optimism Mainnet
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY_MAINNET }}
          OPTIMISM_RPC_URL: ${{ secrets.OPTIMISM_RPC_URL }}
          OPTIMISM_ETHERSCAN_API_KEY: ${{ secrets.OPTIMISM_ETHERSCAN_API_KEY }}
        run: |
          cd contracts
          npm run deploy:optimism

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-contracts-mainnet]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy frontend to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npx vercel --token $VERCEL_TOKEN --prod --yes

      - name: Deploy backend to production
        run: |
          echo "Deploying backend to production..."
          # Add your production deployment commands here

  # Notify team
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Discord
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "RemesaPay Deployment"
          description: "Deployment pipeline has failed!"
          color: 0xff0000

      - name: Notify success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "RemesaPay Deployment"
          description: "Deployment pipeline completed successfully!"
          color: 0x00ff00
