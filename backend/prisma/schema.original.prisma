// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id            String   @id @default(cuid())
  phoneNumber   String   @unique @map("phone_number")
  countryCode   String   @map("country_code") @default("EC")
  walletAddress String?  @map("wallet_address")
  ensName       String?  @map("ens_name")
  kycStatus     KycStatus @map("kyc_status") @default(NONE)
  isActive      Boolean  @default(true) @map("is_active")
  
  // Profile information
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  email         String?  @unique
  birthDate     DateTime? @map("birth_date")
  documentType  String?  @map("document_type")
  documentNumber String? @map("document_number")
  
  // Verification
  phoneVerified Boolean  @default(false) @map("phone_verified")
  emailVerified Boolean  @default(false) @map("email_verified")
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")
  
  // Relations
  sentRemittances     Remittance[] @relation("SenderRemittances")
  receivedRemittances Remittance[] @relation("ReceiverRemittances")
  kycDocuments        KycDocument[]
  notifications       Notification[]
  transactions        Transaction[]
  
  @@map("users")
}

// Remittance transactions
model Remittance {
  id              String   @id @default(cuid())
  senderId        String   @map("sender_id")
  receiverPhone   String   @map("receiver_phone")
  receiverId      String?  @map("receiver_id")
  
  // Amounts
  amountUsd       Decimal  @map("amount_usd")
  amountUsdc      Decimal  @map("amount_usdc")
  feeUsd          Decimal  @map("fee_usd")
  exchangeRate    Decimal  @map("exchange_rate")
  
  // Transaction details
  status          RemittanceStatus @default(PENDING)
  txHash          String?  @map("tx_hash")
  blockNumber     BigInt?  @map("block_number")
  network         String   @default("base")
  
  // Claim details
  claimedAt       DateTime? @map("claimed_at")
  merchantId      String?  @map("merchant_id")
  qrCode          String?  @map("qr_code")
  verificationCode String? @map("verification_code")
  
  // Metadata
  purpose         String?
  notes           String?
  ipAddress       String?  @map("ip_address")
  userAgent       String?  @map("user_agent")
  
  // Timestamps
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  expiresAt       DateTime @map("expires_at")
  
  // Relations
  sender          User     @relation("SenderRemittances", fields: [senderId], references: [id])
  receiver        User?    @relation("ReceiverRemittances", fields: [receiverId], references: [id])
  merchant        Merchant? @relation(fields: [merchantId], references: [id])
  cashOuts        CashOut[]
  notifications   Notification[]
  
  @@map("remittances")
  @@index([receiverPhone])
  @@index([status])
  @@index([createdAt])
}

// Merchant/Agent network
model Merchant {
  id              String   @id @default(cuid())
  businessName    String   @map("business_name")
  businessType    BusinessType @map("business_type") @default(PHARMACY)
  
  // Contact information
  contactName     String   @map("contact_name")
  phone           String   @unique
  email           String?  @unique
  
  // Address
  address         String
  city            String
  province        String
  postalCode      String?  @map("postal_code")
  latitude        Float?
  longitude       Float?
  
  // Business details
  licenseNumber   String?  @map("license_number")
  taxId           String?  @map("tax_id")
  commissionRate  Decimal  @map("commission_rate") @default(2.50)
  cashLimit       Decimal  @map("cash_limit") @default(500.00)
  dailyLimit      Decimal  @map("daily_limit") @default(2000.00)
  
  // Status
  verified        Boolean  @default(false)
  isActive        Boolean  @default(true) @map("is_active")
  onboardedAt     DateTime? @map("onboarded_at")
  
  // Operating hours
  operatingHours  Json?    @map("operating_hours")
  timezone        String   @default("America/Guayaquil")
  
  // Wallet
  walletAddress   String?  @map("wallet_address")
  ensSubdomain    String?  @map("ens_subdomain")
  
  // Timestamps
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  remittances     Remittance[]
  cashOuts        CashOut[]
  merchantBalances MerchantBalance[]
  notifications   Notification[]
  
  @@map("merchants")
  @@index([city, isActive])
  @@index([latitude, longitude])
}

// Cash out transactions
model CashOut {
  id            String   @id @default(cuid())
  remittanceId  String   @map("remittance_id")
  merchantId    String   @map("merchant_id")
  
  // Amount details
  amount        Decimal
  commission    Decimal
  netAmount     Decimal  @map("net_amount")
  
  // Verification
  qrCode        String   @map("qr_code")
  verificationCode String @map("verification_code")
  verifiedAt    DateTime @map("verified_at")
  verifiedBy    String   @map("verified_by")
  
  // Metadata
  ipAddress     String?  @map("ip_address")
  deviceInfo    String?  @map("device_info")
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  remittance    Remittance @relation(fields: [remittanceId], references: [id])
  merchant      Merchant @relation(fields: [merchantId], references: [id])
  
  @@map("cash_outs")
  @@unique([remittanceId])
}

// KYC Documents
model KycDocument {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  documentType  DocumentType @map("document_type")
  
  // Document details
  documentNumber String  @map("document_number")
  documentUrl   String   @map("document_url")
  selfieUrl     String?  @map("selfie_url")
  
  // Verification
  status        VerificationStatus @default(PENDING)
  verifiedAt    DateTime? @map("verified_at")
  verifiedBy    String?  @map("verified_by")
  rejectionReason String? @map("rejection_reason")
  
  // Metadata
  expiryDate    DateTime? @map("expiry_date")
  issueDate     DateTime? @map("issue_date")
  issuingCountry String?  @map("issuing_country")
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  
  @@map("kyc_documents")
}

// Merchant balances
model MerchantBalance {
  id            String   @id @default(cuid())
  merchantId    String   @map("merchant_id")
  
  // Balance details
  availableBalance Decimal @map("available_balance") @default(0)
  pendingBalance   Decimal @map("pending_balance") @default(0)
  totalEarned      Decimal @map("total_earned") @default(0)
  
  // Currency
  currency      String   @default("USDC")
  
  // Timestamps
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  merchant      Merchant @relation(fields: [merchantId], references: [id])
  
  @@map("merchant_balances")
  @@unique([merchantId, currency])
}

// Transaction logs
model Transaction {
  id            String   @id @default(cuid())
  userId        String?  @map("user_id")
  
  // Transaction details
  type          TransactionType
  amount        Decimal
  currency      String
  status        TransactionStatus @default(PENDING)
  
  // Blockchain details
  txHash        String?  @map("tx_hash")
  blockNumber   BigInt?  @map("block_number")
  network       String
  gasUsed       BigInt?  @map("gas_used")
  gasPrice      BigInt?  @map("gas_price")
  
  // Metadata
  description   String?
  metadata      Json?
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  confirmedAt   DateTime? @map("confirmed_at")
  
  // Relations
  user          User?    @relation(fields: [userId], references: [id])
  
  @@map("transactions")
  @@index([txHash])
  @@index([userId, createdAt])
}

// Notifications
model Notification {
  id            String   @id @default(cuid())
  userId        String?  @map("user_id")
  merchantId    String?  @map("merchant_id")
  remittanceId  String?  @map("remittance_id")
  
  // Notification details
  type          NotificationType
  title         String
  message       String
  channel       NotificationChannel @default(SMS)
  
  // Status
  sent          Boolean  @default(false)
  sentAt        DateTime? @map("sent_at")
  delivered     Boolean  @default(false)
  deliveredAt   DateTime? @map("delivered_at")
  
  // Metadata
  metadata      Json?
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  user          User?      @relation(fields: [userId], references: [id])
  merchant      Merchant?  @relation(fields: [merchantId], references: [id])
  remittance    Remittance? @relation(fields: [remittanceId], references: [id])
  
  @@map("notifications")
  @@index([userId, createdAt])
}

// Exchange rates cache
model ExchangeRate {
  id            String   @id @default(cuid())
  fromCurrency  String   @map("from_currency")
  toCurrency    String   @map("to_currency")
  rate          Decimal
  provider      String
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  
  @@map("exchange_rates")
  @@unique([fromCurrency, toCurrency, provider])
  @@index([createdAt])
}

// Compliance logs
model ComplianceLog {
  id            String   @id @default(cuid())
  userId        String?  @map("user_id")
  remittanceId  String?  @map("remittance_id")
  
  // Compliance details
  type          String
  status        String
  details       Json?
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  
  @@map("compliance_logs")
  @@index([userId])
  @@index([type, createdAt])
}

// Enums
enum KycStatus {
  NONE
  BASIC
  FULL
  REJECTED
}

enum RemittanceStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CLAIMED
  EXPIRED
  FAILED
}

enum BusinessType {
  PHARMACY
  CONVENIENCE_STORE
  BANK_AGENT
  EXCHANGE_HOUSE
  OTHER
}

enum DocumentType {
  PASSPORT
  NATIONAL_ID
  DRIVERS_LICENSE
  UTILITY_BILL
  BANK_STATEMENT
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum TransactionType {
  SEND_REMITTANCE
  CLAIM_REMITTANCE
  MERCHANT_PAYOUT
  FEE_COLLECTION
  GAS_REFUND
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  REVERTED
}

enum NotificationType {
  REMITTANCE_SENT
  REMITTANCE_RECEIVED
  REMITTANCE_CLAIMED
  KYC_APPROVED
  KYC_REJECTED
  MERCHANT_VERIFICATION
  LOW_BALANCE
  SYSTEM_MAINTENANCE
}

enum NotificationChannel {
  SMS
  EMAIL
  PUSH
  WHATSAPP
}
